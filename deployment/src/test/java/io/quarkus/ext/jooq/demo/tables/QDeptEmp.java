/*
 * This file is generated by jOOQ.
 */
package io.quarkus.ext.jooq.demo.tables;

import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.TableImpl;

import io.quarkus.ext.jooq.demo.DefaultSchema;

import javax.annotation.Generated;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Generated("2020-08-21")
public class QDeptEmp extends TableImpl<Record> {

    private static final long serialVersionUID = 1236700770;

    /**
     * The reference instance of <code>dept_emp</code>
     */
    public static final QDeptEmp $ = new QDeptEmp();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>dept_emp.emp_no</code>.
     */
    public final TableField<Record, Integer> empNo = createField(DSL.name("emp_no"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>dept_emp.dept_no</code>.
     */
    public final TableField<Record, String> deptNo = createField(DSL.name("dept_no"), org.jooq.impl.SQLDataType.CHAR(4).nullable(false), this, "");

    /**
     * The column <code>dept_emp.from_date</code>.
     */
    public final TableField<Record, LocalDate> fromDate = createField(DSL.name("from_date"), org.jooq.impl.SQLDataType.LOCALDATE.nullable(false), this, "");

    /**
     * The column <code>dept_emp.to_date</code>.
     */
    public final TableField<Record, LocalDate> toDate = createField(DSL.name("to_date"), org.jooq.impl.SQLDataType.LOCALDATE.nullable(false), this, "");

    /**
     * Create a <code>dept_emp</code> table reference
     */
    public QDeptEmp() {
        this(DSL.name("dept_emp"), null);
    }

    /**
     * Create an aliased <code>dept_emp</code> table reference
     */
    public QDeptEmp(String alias) {
        this(DSL.name(alias), $);
    }

    /**
     * Create an aliased <code>dept_emp</code> table reference
     */
    public QDeptEmp(Name alias) {
        this(alias, $);
    }

    private QDeptEmp(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private QDeptEmp(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<Record> getPrimaryKey() {
        return Internal.createUniqueKey(QDeptEmp.$, "KEY_dept_emp_PRIMARY", new TableField[] { QDeptEmp.$.empNo, QDeptEmp.$.deptNo }, true);
    }

    @Override
    public List<UniqueKey<Record>> getKeys() {
        return Arrays.<UniqueKey<Record>>asList(Internal.createUniqueKey(QDeptEmp.$, "KEY_dept_emp_PRIMARY", new TableField[] { QDeptEmp.$.empNo, QDeptEmp.$.deptNo }, true));
    }

    @Override
    public QDeptEmp as(String alias) {
        return new QDeptEmp(DSL.name(alias), this);
    }

    @Override
    public QDeptEmp as(Name alias) {
        return new QDeptEmp(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public QDeptEmp rename(String name) {
        return new QDeptEmp(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public QDeptEmp rename(Name name) {
        return new QDeptEmp(name, null);
    }
}
