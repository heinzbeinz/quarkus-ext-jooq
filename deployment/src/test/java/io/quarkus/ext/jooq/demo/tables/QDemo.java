/*
 * This file is generated by jOOQ.
 */
package io.quarkus.ext.jooq.demo.tables;

import io.quarkus.ext.jooq.demo.Public;
import io.quarkus.ext.jooq.demo.tables.records.RDemo;
import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.TableImpl;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class QDemo extends TableImpl<RDemo> {

    private static final long serialVersionUID = -1188780247;

    /**
     * The reference instance of <code>PUBLIC.DEMO</code>
     */
    public static final QDemo $ = new QDemo();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RDemo> getRecordType() {
        return RDemo.class;
    }

    /**
     * The column <code>PUBLIC.DEMO.ID</code>.
     */
    public final TableField<RDemo, String> id = createField(DSL.name("ID"), org.jooq.impl.SQLDataType.CHAR(32).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.DEMO.NAME</code>.
     */
    public final TableField<RDemo, String> name = createField(DSL.name("NAME"), org.jooq.impl.SQLDataType.VARCHAR(128).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.DEMO.AMOUNT</code>.
     */
    public final TableField<RDemo, BigDecimal> amount = createField(DSL.name("AMOUNT"), org.jooq.impl.SQLDataType.DECIMAL(12, 3), this, "");

    /**
     * The column <code>PUBLIC.DEMO.CREATED_AT</code>.
     */
    public final TableField<RDemo, LocalDateTime> createdAt = createField(DSL.name("CREATED_AT"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * Create a <code>PUBLIC.DEMO</code> table reference
     */
    public QDemo() {
        this(DSL.name("DEMO"), null);
    }

    /**
     * Create an aliased <code>PUBLIC.DEMO</code> table reference
     */
    public QDemo(String alias) {
        this(DSL.name(alias), $);
    }

    /**
     * Create an aliased <code>PUBLIC.DEMO</code> table reference
     */
    public QDemo(Name alias) {
        this(alias, $);
    }

    private QDemo(Name alias, Table<RDemo> aliased) {
        this(alias, aliased, null);
    }

    private QDemo(Name alias, Table<RDemo> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<RDemo> getPrimaryKey() {
        return Internal.createUniqueKey(QDemo.$, "CONSTRAINT_1", new TableField[] { QDemo.$.id }, true);
    }

    @Override
    public List<UniqueKey<RDemo>> getKeys() {
        return Arrays.<UniqueKey<RDemo>>asList(Internal.createUniqueKey(QDemo.$, "CONSTRAINT_1", new TableField[] { QDemo.$.id }, true));
    }

    @Override
    public QDemo as(String alias) {
        return new QDemo(DSL.name(alias), this);
    }

    @Override
    public QDemo as(Name alias) {
        return new QDemo(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public QDemo rename(String name) {
        return new QDemo(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public QDemo rename(Name name) {
        return new QDemo(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------
    @Override
    public Row4<String, String, BigDecimal, LocalDateTime> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
