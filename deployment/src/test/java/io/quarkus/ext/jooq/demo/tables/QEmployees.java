/*
 * This file is generated by jOOQ.
 */
package io.quarkus.ext.jooq.demo.tables;

import io.quarkus.ext.jooq.demo.DefaultSchema;
import io.quarkus.ext.jooq.demo.enums.EmployeesGender;

import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.TableImpl;
import javax.annotation.Generated;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Generated("2020-08-21")
public class QEmployees extends TableImpl<Record> {

    private static final long serialVersionUID = 820133475;

    /**
     * The reference instance of <code>employees</code>
     */
    public static final QEmployees $ = new QEmployees();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>employees.emp_no</code>.
     */
    public final TableField<Record, Integer> empNo = createField(DSL.name("emp_no"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>employees.birth_date</code>.
     */
    public final TableField<Record, LocalDate> birthDate = createField(DSL.name("birth_date"), org.jooq.impl.SQLDataType.LOCALDATE.nullable(false), this, "");

    /**
     * The column <code>employees.first_name</code>.
     */
    public final TableField<Record, String> firstName = createField(DSL.name("first_name"), org.jooq.impl.SQLDataType.VARCHAR(14).nullable(false), this, "");

    /**
     * The column <code>employees.last_name</code>.
     */
    public final TableField<Record, String> lastName = createField(DSL.name("last_name"), org.jooq.impl.SQLDataType.VARCHAR(16).nullable(false), this, "");

    /**
     * The column <code>employees.gender</code>.
     */
    public final TableField<Record, EmployeesGender> gender = createField(DSL.name("gender"), org.jooq.impl.SQLDataType.VARCHAR(1).nullable(false).asEnumDataType(io.quarkus.ext.jooq.demo.enums.EmployeesGender.class), this, "");

    /**
     * The column <code>employees.hire_date</code>.
     */
    public final TableField<Record, LocalDate> hireDate = createField(DSL.name("hire_date"), org.jooq.impl.SQLDataType.LOCALDATE.nullable(false), this, "");

    /**
     * Create a <code>employees</code> table reference
     */
    public QEmployees() {
        this(DSL.name("employees"), null);
    }

    /**
     * Create an aliased <code>employees</code> table reference
     */
    public QEmployees(String alias) {
        this(DSL.name(alias), $);
    }

    /**
     * Create an aliased <code>employees</code> table reference
     */
    public QEmployees(Name alias) {
        this(alias, $);
    }

    private QEmployees(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private QEmployees(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<Record> getPrimaryKey() {
        return Internal.createUniqueKey(QEmployees.$, "KEY_employees_PRIMARY", new TableField[] { QEmployees.$.empNo }, true);
    }

    @Override
    public List<UniqueKey<Record>> getKeys() {
        return Arrays.<UniqueKey<Record>>asList(Internal.createUniqueKey(QEmployees.$, "KEY_employees_PRIMARY", new TableField[] { QEmployees.$.empNo }, true));
    }

    @Override
    public QEmployees as(String alias) {
        return new QEmployees(DSL.name(alias), this);
    }

    @Override
    public QEmployees as(Name alias) {
        return new QEmployees(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public QEmployees rename(String name) {
        return new QEmployees(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public QEmployees rename(Name name) {
        return new QEmployees(name, null);
    }
}
